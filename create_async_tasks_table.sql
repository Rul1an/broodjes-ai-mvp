-- Create async_tasks table if it doesn't exist
CREATE TABLE IF NOT EXISTS async_tasks (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    task_id UUID DEFAULT gen_random_uuid() NOT NULL UNIQUE,
    idea TEXT NOT NULL,
    model TEXT NOT NULL,
    status TEXT NOT NULL DEFAULT 'pending',
    recipe TEXT,
    estimated_cost NUMERIC,
    error_message TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Create index for faster lookups by task_id
CREATE INDEX IF NOT EXISTS idx_async_tasks_task_id ON async_tasks(task_id);

-- Make sure updated_at is maintained automatically
CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = NOW();
   RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS update_async_tasks_updated_at ON async_tasks;
CREATE TRIGGER update_async_tasks_updated_at
BEFORE UPDATE ON async_tasks
FOR EACH ROW
EXECUTE PROCEDURE update_modified_column();

-- Add appropriate RLS policies if needed
ALTER TABLE async_tasks ENABLE ROW LEVEL SECURITY;

-- Create policy that allows all users to read
CREATE POLICY IF NOT EXISTS "Anyone can read async_tasks"
ON async_tasks FOR SELECT
USING (true);

-- Create policy that allows service to insert/update
CREATE POLICY IF NOT EXISTS "Service can insert async_tasks"
ON async_tasks FOR INSERT
TO authenticated
WITH CHECK (true);

CREATE POLICY IF NOT EXISTS "Service can update async_tasks"
ON async_tasks FOR UPDATE
TO authenticated
USING (true);
